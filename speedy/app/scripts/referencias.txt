BORRAR ESTE ARCHIVO ANTES DE ENTREGAR

https://vasscompany.com/en/
https://ohla-group.com/
https://www.tenaris.com/en



ğŸ”¹ Paso 1: Crear la Estructura del Proyecto
Antes de escribir cÃ³digo, primero organiza tu proyecto en carpetas y archivos. Puedes hacerlo manualmente o con el siguiente comando en la terminal:

sh
Copiar
Editar
mkdir imagen-hover
cd imagen-hover
touch index.html styles.css script.js
Esto crea una carpeta llamada imagen-hover con tres archivos:

index.html â†’ ContendrÃ¡ la estructura de la pÃ¡gina.
styles.css â†’ ManejarÃ¡ los estilos de las imÃ¡genes y efectos.
script.js â†’ ContendrÃ¡ el cÃ³digo JavaScript para la interactividad.

ğŸ”¹ Paso 2: Crear la Base en HTML (index.html)
ğŸ“Œ Objetivo: Crear un contenedor con una imagen y una secciÃ³n de informaciÃ³n que aparecerÃ¡ al pasar el cursor.

html
Copiar
Editar
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Efecto Hover en ImÃ¡genes</title>
    <link rel="stylesheet" href="styles.css"> <!-- Enlace al archivo CSS -->
</head>
<body>

    <div class="contenedor" data-info="DescripciÃ³n de la imagen 1">
        <img src="https://via.placeholder.com/200" class="imagen" alt="Imagen 1">
        <div class="info"></div>
    </div>

    <div class="contenedor" data-info="DescripciÃ³n de la imagen 2">
        <img src="https://via.placeholder.com/200" class="imagen" alt="Imagen 2">
        <div class="info"></div>
    </div>

    <script src="script.js"></script> <!-- Enlace al archivo JavaScript -->
</body>
</html>

ğŸ“Œ ExplicaciÃ³n:
Estructura bÃ¡sica

<!DOCTYPE html> â†’ Define el documento como HTML5.
<meta charset="UTF-8"> â†’ Permite caracteres especiales como Ã± y tildes.
<meta name="viewport" content="width=device-width, initial-scale=1.0"> â†’ Hace que la pÃ¡gina sea responsiva.
CreaciÃ³n de imÃ¡genes interactivas

Cada imagen estÃ¡ dentro de un <div class="contenedor">.
Se usa un atributo data-info="DescripciÃ³n de la imagen" que contendrÃ¡ la descripciÃ³n personalizada.
Dentro del <div class="contenedor">, hay:
<img> â†’ La imagen.
<div class="info"></div> â†’ Un cuadro de texto vacÃ­o que se llenarÃ¡ con JavaScript.
Carga de archivos externos

<link rel="stylesheet" href="styles.css"> â†’ Importa el archivo CSS.
<script src="script.js"></script> â†’ Carga el script externo.

ğŸ”¹ Paso 3: Agregar Estilos con CSS (styles.css)
ğŸ“Œ Objetivo: Dar estilo a las imÃ¡genes y el cuadro de informaciÃ³n.

css
Copiar
Editar
/* Estilo del contenedor */
.contenedor {
    position: relative;
    display: inline-block;
    cursor: pointer;
    margin: 10px;
}

/* Estilo de la imagen */
.imagen {
    width: 200px;
    transition: transform 0.3s ease-in-out;
    border-radius: 10px;
}

/* Estilo del cuadro de informaciÃ³n */
.info {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    text-align: center;
    font-size: 18px;
    padding: 10px;
    border-radius: 10px;
}
ğŸ“Œ ExplicaciÃ³n:
.contenedor

position: relative; â†’ Permite posicionar elementos internos (.info).
display: inline-block; â†’ Hace que los elementos se alineen horizontalmente.
cursor: pointer; â†’ Cambia el cursor al pasar sobre la imagen.
.imagen

width: 200px; â†’ Define un tamaÃ±o fijo para las imÃ¡genes.
transition: transform 0.3s ease-in-out; â†’ Hace que el cambio de tamaÃ±o sea suave.
border-radius: 10px; â†’ Bordes redondeados.
.info

position: absolute; top: 0; left: 0; â†’ Superpone el cuadro sobre la imagen.
opacity: 0; â†’ Hace que el cuadro de texto sea invisible al inicio.
transition: opacity 0.3s ease-in-out; â†’ Hace que el cuadro aparezca de forma suave.
display: flex; align-items: center; justify-content: center; â†’ Centra el texto dentro del cuadro.

ğŸ”¹ Paso 4: Agregar Interactividad con JavaScript (script.js)
ğŸ“Œ Objetivo: Hacer que el cuadro de informaciÃ³n aparezca y la imagen se agrande al pasar el cursor.

javascript
Copiar
Editar
document.addEventListener("DOMContentLoaded", function() {
    const contenedores = document.querySelectorAll(".contenedor");

    contenedores.forEach(contenedor => {
        const imagen = contenedor.querySelector(".imagen");
        const info = contenedor.querySelector(".info");

        // Obtener el texto de la descripciÃ³n desde data-info
        info.innerText = contenedor.getAttribute("data-info");

        contenedor.addEventListener("mouseover", function() {
            imagen.style.transform = "scale(1.2)";
            info.style.opacity = "1";
        });

        contenedor.addEventListener("mouseout", function() {
            imagen.style.transform = "scale(1)";
            info.style.opacity = "0";
        });
    });
});
ğŸ“Œ ExplicaciÃ³n:
document.addEventListener("DOMContentLoaded", function() {...})

Asegura que el cÃ³digo se ejecute solo cuando la pÃ¡gina haya terminado de cargar.
const contenedores = document.querySelectorAll(".contenedor");

Obtiene todos los elementos con la clase .contenedor.
contenedores.forEach(contenedor => { ... });

Itera sobre cada imagen y le aÃ±ade interactividad.
info.innerText = contenedor.getAttribute("data-info");

Obtiene el texto de data-info y lo coloca dentro del <div class="info">.
contenedor.addEventListener("mouseover", function() {...});

Al pasar el mouse, la imagen se agranda (scale(1.2)) y el cuadro de texto aparece (opacity: 1).
contenedor.addEventListener("mouseout", function() {...});

Al quitar el mouse, la imagen vuelve a su tamaÃ±o normal (scale(1)) y el cuadro desaparece (opacity: 0).